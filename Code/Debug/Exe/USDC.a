;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/19/2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <math.h>
;
;// Declare your global variables here
;#define dt 0.01;
;#define kp 0.08;
;#define ki 0.01;
;#define kd 0.01;
;#define epsilon 0.01;
;
;#define R1 PORTD.0
;#define L1 PORTD.1
;
;
;#define trig_pin PORTB.0
;#define echo_pin PINB.1
;#define k PINC.5
;float last_error,last_iterm,error,iterm,dterm,pterm,output=0;
;//float pterm,error=0;
;float power=50;

	.DSEG
;int timer;
;int d = 0;int di;
;char str[20];
;
;// Timer 0 overflow interrupt service routine
;//TIM0_OVF = Timer/Counter0 Overflow
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0039 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003A // Place your code here
; 0000 003B 
; 0000 003C     TCNT0=0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003D   //timer is the number of overflows
; 0000 003E     timer=1+timer;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003F }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;int distance(){
; 0000 0040 int distance(){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0041 
; 0000 0042        PORTB.0=1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0043        delay_us(20);PORTB.0=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0044          while(PINB.1==0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0045 	//TCNT0 indicates the pulse frequency (125KHz)
; 0000 0046  timer=0;TCNT0=0;TCCR0=0x02;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0047  while(PINB.1 == 1);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0048  TCCR0=0x00; //No clock source - Deactivating TC0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0049 
; 0000 004A //no object detected after 30ms
; 0000 004B  if(timer*256.0+TCNT0>30000.0){
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004C  lcd_clear();
;PCODE: $0000003E VOL: 0
; 0000 004D  lcd_gotoxy(0,0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004E  lcd_puts("chizi nist");}
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004F  else
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0050  {
; 0000 0051   d=0;
;PCODE: $00000048 VOL: 0
; 0000 0052   d=((timer*256.0+ TCNT0)*.17);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0053   di=d;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0054   lcd_clear();
;PCODE: $00000058 VOL: 0
; 0000 0055   sprintf(str,"  d=%d cm",d);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0056   lcd_puts(str);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0057   delay_ms(150);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0058 
; 0000 0059       }
;PCODE: $0000006A VOL: 0
; 0000 005A       return di;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005B }
;PCODE: $0000006D VOL: 0

	.DSEG
_0xF:
	.BYTE 0xB
;
;
;//motor Function
;// f | F : forward
;// b | B : backward
;// r | R :right
;// l | L :left
;void motor(char direct,float power)
; 0000 0064 {

	.CSEG
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0065     if(direct=='f' | direct=='F')
;PCODE: $00000070 VOL: 0
;	direct -> Y+4
;	power -> Y+0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0066         {
; 0000 0067         R1=1;L1=0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0068         }
; 0000 0069 
; 0000 006A     if(direct=='b' | direct=='B')
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 006B         {
; 0000 006C         R1=0;L1=1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006D         }
; 0000 006E 
; 0000 006F OCR1BH=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0070 //OCR1BL=(pow*255/100);
; 0000 0071 OCR1BL=0X00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0072 OCR1AH=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0073 OCR1AL=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0074 OCR1AL=power;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0075 }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;void motor_break()
; 0000 0077 {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0078 R1=L1=0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0079 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;void main(void)
; 0000 007C { int r=35; // r is our reference distance
;PCODE: $000000A3 VOL: 0
; 0000 007D // Declare your local variables here
; 0000 007E 
; 0000 007F // Input/Output Ports initialization
; 0000 0080 // Port A initialization
; 0000 0081 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0082 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;	r -> R16,R17
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0083 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0084 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0085 
; 0000 0086 // Port B initialization
; 0000 0087 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0088 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0089 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
; 0000 008A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 008B 
; 0000 008C // Port C initialization
; 0000 008D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 008F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0090 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0091 
; 0000 0092 // Port D initialization
; 0000 0093 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0094 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0095 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0096 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0097 
; 0000 0098 // Timer/Counter 0 initialization
; 0000 0099 // Clock source: System Clock
; 0000 009A // Clock value: 1000.000 kHz
; 0000 009B // Mode: Normal top=0xFF
; 0000 009C // OC0 output: Disconnected
; 0000 009D // Timer Period: 0.256 ms
; 0000 009E //TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
; 0000 009F TCCR0=0x02;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A0 TCNT0=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00A1 OCR0=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00A2 
; 0000 00A3 // Timer/Counter 1 initialization
; 0000 00A4 // Clock source: System Clock
; 0000 00A5 // Clock value: 1000.000 kHz
; 0000 00A6 // Mode: Ph. correct PWM top=0x00FF
; 0000 00A7 // OC1A output: Non-Inverted PWM
; 0000 00A8 // OC1B output: Disconnected
; 0000 00A9 // Noise Canceler: Off
; 0000 00AA // Input Capture on Falling Edge
; 0000 00AB // Timer Period: 0.51 ms
; 0000 00AC // Output Pulse(s):
; 0000 00AD // OC1A Period: 0.51 ms Width: 0 us
; 0000 00AE // Timer1 Overflow Interrupt: Off
; 0000 00AF // Input Capture Interrupt: Off
; 0000 00B0 // Compare A Match Interrupt: Off
; 0000 00B1 // Compare B Match Interrupt: Off
; 0000 00B2 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B3 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00B4 TCNT1H=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00B5 TCNT1L=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B6 ICR1H=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00B7 ICR1L=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00B8 OCR1AH=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00B9 OCR1AL=0;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00BA OCR1BH=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00BB OCR1BL=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00BC 
; 0000 00BD // Timer/Counter 2 initialization
; 0000 00BE // Clock source: System Clock
; 0000 00BF // Clock value: Timer2 Stopped
; 0000 00C0 // Mode: Normal top=0xFF
; 0000 00C1 // OC2 output: Disconnected
; 0000 00C2 ASSR=0<<AS2;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C3 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00C4 TCNT2=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00C5 OCR2=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00C6 
; 0000 00C7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C8 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00C9 
; 0000 00CA // External Interrupt(s) initialization
; 0000 00CB // INT0: Off
; 0000 00CC // INT1: Off
; 0000 00CD // INT2: Off
; 0000 00CE MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00CF MCUCSR=(0<<ISC2);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00D0 
; 0000 00D1 // USART initialization
; 0000 00D2 // USART disabled
; 0000 00D3 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00D4 
; 0000 00D5 // Analog Comparator initialization
; 0000 00D6 // Analog Comparator: Off
; 0000 00D7 // The Analog Comparator's positive input is
; 0000 00D8 // connected to the AIN0 pin
; 0000 00D9 // The Analog Comparator's negative input is
; 0000 00DA // connected to the AIN1 pin
; 0000 00DB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00DC SFIOR=(0<<ACME);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00DD 
; 0000 00DE // ADC initialization
; 0000 00DF // ADC disabled
; 0000 00E0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00E1 
; 0000 00E2 // SPI initialization
; 0000 00E3 // SPI disabled
; 0000 00E4 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00E5 
; 0000 00E6 // TWI initialization
; 0000 00E7 // TWI disabled
; 0000 00E8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00E9 
; 0000 00EA // Alphanumeric LCD initialization
; 0000 00EB // Connections are specified in the
; 0000 00EC // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00ED // RS - PORTA Bit 0
; 0000 00EE // RD - PORTA Bit 1
; 0000 00EF // EN - PORTA Bit 2
; 0000 00F0 // D4 - PORTA Bit 4
; 0000 00F1 // D5 - PORTA Bit 5
; 0000 00F2 // D6 - PORTA Bit 6
; 0000 00F3 // D7 - PORTA Bit 7
; 0000 00F4 // Characters/line: 8
; 0000 00F5 lcd_init(32);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00F6 
; 0000 00F7 // Global enable interrupts
; 0000 00F8 #asm("sei")
;PCODE: $000000EC VOL: 0
	sei
;PCODE: $000000ED VOL: 0
; 0000 00F9 
; 0000 00FA while (1)
;PCODE: $000000EE VOL: 0
; 0000 00FB       {
; 0000 00FC       d=distance();
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00FD //      error = r-d;
; 0000 00FE //      pterm = error*0.1;
; 0000 00FF //      iterm = (error*0.01)+last_iterm;
; 0000 0100 //     // dterm = (error-last_error)*kd;
; 0000 0101 //      output = (pterm+iterm)*1.5;  //2
; 0000 0102 //     // last_error=error;
; 0000 0103 //      last_iterm=iterm;
; 0000 0104 //      if(error>=5) {
; 0000 0105 //      OCR1AL=100; //Controller Bias
; 0000 0106 //      OCR1AL=OCR1AL+output;
; 0000 0107 //      power=OCR1AL;
; 0000 0108 //      motor('f',power);
; 0000 0109 //      delay_ms(10); }
; 0000 010A //      if(error<=-5){
; 0000 010B //      OCR1AL=100; //Controller Bias
; 0000 010C //      //pterm=-pterm;
; 0000 010D //      output=-output;
; 0000 010E //      OCR1AL=OCR1AL+output;
; 0000 010F //      power=OCR1AL;
; 0000 0110 //      motor('b',power);
; 0000 0111 //      delay_ms(10);}
; 0000 0112 //      //if(-5<error<5){
; 0000 0113 //      //motor_break();
; 0000 0114 //      //power=0;
; 0000 0115 //      //motor('f',power);
; 0000 0116 //      //delay_ms(10);}
; 0000 0117         if(d>5 && d<15)
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0118         {power= 150;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0119         motor('f',power);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 011A         }
; 0000 011B         if(d>15 && d<25)
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 011C         {power=100;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 011D         motor('f',power);}
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 011E         if(d>25 && d<35)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 011F         {power=50;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0120         motor('f',power);}
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0121         if(d>35 && d<45)
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0122         {power= 0;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0123         motor('b',power);}
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0124         if(d>45 && d<55)
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0125         {power= 50;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0126         motor('b',power);}
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0127         if(d>55 && d<65)
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0128         {power=100;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0129         motor('b',power);}
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 012A         if(d>65 && d<75)
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 012B         {power=150;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 012C         motor('b',power);}
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 012D         if(d>75 && d<90)
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 012E         {power=200;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 012F         motor('b',power);}
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0130         if(d>90)
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0131         {power=250;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0132         motor('b',power);}
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0133 
; 0000 0134       }   }
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
